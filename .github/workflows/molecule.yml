---
name: Molecule
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  define_scenarios:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get changed roles
        id: changed-roles
        uses: tj-actions/changed-files@v40
        with:
          dir_names: true
          dir_names_max_depth: 3
          files: |
              playbooks/roles/**/**
      - name: Get changed scenarios
        id: changed-scenarios
        uses: tj-actions/changed-files@v40
        with:
          dir_names: true
          dir_names_max_depth: 2
          files: |
              molecule/playbook-*/*.yml
              molecule/role-*/*.yml
      - name: Get changed playbooks
        id: changed-playbooks
        uses: tj-actions/changed-files@v40
        with:
          files: |
              playbooks/*.yml
      - name: Set matrix based on changed files
        id: set-scenario-matrix
        run: |
          ROLES=(${{ steps.changed-roles.outputs.all_changed_files }})
          ROLES=("${ROLES[@]/#playbooks\/roles\//role-}") # playbooks/roles/foo -> role-foo
          echo "DEBUG ROLES: ${ROLES[*]}"

          PLAYBOOKS=(${playbooks})
          PLAYBOOKS=("${PLAYBOOKS[@]/#playbooks\//playbook-}") # playbooks/foo.yml -> playbook-foo.yml
          PLAYBOOKS=("${PLAYBOOKS[@]/%.yml/}") # playbook-foo.yml -> playbook-foo
          echo "DEBUG PLAYBOOKS: ${PLAYBOOKS[*]}"

          SCENARIOS=(${{ steps.changed-scenarios.outputs.all_changed_files }})
          SCENARIOS=("${SCENARIOS[@]/#molecule\//}") # molecule/playbook-foo -> playbook-foo
          echo "DEBUG SCENARIOS: ${SCENARIOS[*]}"

          ALL_CHANGES="${PLAYBOOKS[*]} ${ROLES[*]} ${SCENARIOS[*]}"
          echo "DEBUG ALL_CHANGES: $ALL_CHANGES"

          # Construct a unique bash array out of ALL_CHANGES
          MATRIX=($(echo "$ALL_CHANGES" | xargs -n 1 | sort -u))

          # Create a valid json array out of the bash array using jq
          MATRIX=$(printf '%s\n' "${MATRIX[@]}" | jq -R . | jq -c -s .)

          # Store the results
          echo matrix={\"scenarios\": $MATRIX} >> $GITHUB_OUTPUT
          echo scenarios=$MATRIX >> $GITHUB_OUTPUT
          echo "DEBUG SCENARIOS: $MATRIX"
    outputs:
      matrix: ${{ steps.set-scenario-matrix.outputs.matrix }}
      scenarios: ${{ steps.set-scenario-matrix.outputs.scenarios }}

  molecule:
    needs: define_scenarios
    runs-on: ubuntu-latest
    if: ${{ needs.define_scenarios.outputs.scenarios != '[""]' && needs.define_scenarios.outputs.scenarios != '' }}
    env:
      DOCKER_USER: ${{ github.actor }}
      DOCKER_PW: ${{ secrets.GITHUB_TOKEN }}
      DOCKER_REGISTRY: ghcr.io
      ANSIBLE_FORCE_COLOR: '1'
      ANSIBLE_STDOUT_CALLBACK: yaml
      MOLECULE_CONFIG: molecule/ext/molecule-src/molecule.yml
      REQUIREMENTS_FILE: molecule/ext/molecule-src/requirements.txt
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.define_scenarios.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - run: pip install -r ${{ env.REQUIREMENTS_FILE }}
      - name: Check if scenario exists
        id: check_scenario_exists
        run: |
          if [[ -d molecule/${{ matrix.scenarios }}  ]]; then
            echo "exitcode=true" >> $GITHUB_OUTPUT
          else
            echo "exitcode=false" >> $GITHUB_OUTPUT
          fi
      - name: Molecule tests for playbook
        if: ${{ steps.check_scenario_exists.outputs.exitcode == 'true' }}
        run: |
          molecule -c ${{ env.MOLECULE_CONFIG }} test --scenario-name  ${{ matrix.scenarios }}
