---
# sets variable {{fact_regular_users}} to a list of users 
# example content with just one user named "foo": 
# [   { user: "foo", 
#       userid: 1000, groupid: 1000, 
#       home: "/home/foo", 
#       shell: "/bin/bash",
#       description: "sample user foo"
#     }  
# ]
# 
# assumes a Unix-like environment where all users are listed in /etc/passwd
# selects users that meet the following criteria
#   - userid > 999  which excludes system roles
#   - home directory underneath /home
#
# NB ugly hack: the filter set "to_json|from_json" is needed to transform a dictionary
#     with unicode strings to a dictionary with ascii strings
#     as json_query expects ascii strings

# jmespath is required for filter 
  - name: Ensure jmespath is installed
    pip:
      name: jmespath

  - name: Read database /etc/passwd
    getent:
      database: passwd

  - name: Set fact regular_users
    set_fact:
      fact_regular_users: "{{ getent_passwd|dict2items|to_json|from_json|
      json_query('[?to_number(value[1]) >`999` && starts_with(value[4], `/home/`) && key!=`ubuntu`
      ].{user: key, userid: to_number(value[1]), groupid: to_number(value[2]),
      description: value[3], home: value[4], shell: value[5]}') }}"

  - name: Read database /etc/group
    getent:
      database: group

  - name: Get CO groupnames
    slurp:
      src: /etc/rsc/managedgroups
      
    register: _co_groupnames

  - name: Parse CO groupnames
    set_fact:
      _co_groupnames_parsed: "{{ (_co_groupnames['content'] | b64decode).split('\n') | select | list }}"

  - name: Set fact CO groups
    set_fact:
      fact_co_groups: "{{ fact_co_groups | default({}) | combine({item.key: item.value[-1].split(',') }) }}"
    loop: "{{ getent_group | dict2items | selectattr('key', 'in', _co_groupnames_parsed) | list }}"
