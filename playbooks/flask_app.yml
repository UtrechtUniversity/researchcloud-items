---
- name: Serve flask app with Nginx
  hosts: localhost
  gather_facts: true
  vars:
    _flask_app_auth_sram: "{{ flask_app_auth_sram | default(false, true) | bool | ternary('sram', '') }}"
    _flask_app_auth_basic: "{{ flask_app_auth_basic | default(false, true) | bool | ternary('basic', '') }}"
    flask_app_auth: "{{ _flask_app_auth_sram | ternary(_flask_app_auth_sram, _flask_app_auth_basic) }}"
    flask_app_python_version: '3.10'
    uwsgi_app_name: "{{ flask_app_name }}"
    uwsgi_app_path: "{{ flask_app_path }}"
    uwsgi_app_dir: /var/www/{{ flask_app_name }}
    uwsgi_num_workers: "{{ flask_app_num_workers | default('2', true) }}"
    _uwsgi_config:
      callable: app
      module: "{{ (flask_app_name == 'wsgi.py') | ternary('wsgi:app', omit) }}"
    uwsgi_config_block: "{{ flask_app_uwsgi_config | default('') | replace('\\n', '\n') }}"
    uwsgi_venv: /var/www/{{ flask_app_name }}/venv
    uwsgi_nginx_mountpoint: "{{ flask_app_location | default('/', true) }}"
    _uwsgi_proxy_config:
      auth: "{{ flask_app_auth | default(omit, true) }}"
      htpasswd: "{{ (flask_app_auth == 'basic') | ternary(flask_app_name, omit) }}"
    nginx_reverse_proxy_auth_info: "{{ _flask_app_auth_info }}"

  pre_tasks:
    - name: Check if nginx is installed
      when: "'molecule-notest' not in ansible_skip_tags"
      block:
        - name: Populate service facts
          ansible.builtin.service_facts:

        - name: Stop if nginx is not installed
          fail:
            msg: Nginx must be installed and active for this component to work.
          when: services['nginx.service'].state != 'running'

    - name: Check for presence of SRC Nginx SRAM authentication config
      lineinfile:
        line: "{{ item }}"
        dest: /etc/nginx/app-location-conf.d/authentication.conf
      check_mode: true
      register: src_nginx_config
      with_items:
        - location @custom_401 {
        - location = /oauth2_callback {
        - location = /validate {

    - name: Stop if SRC nginx config is not present
      fail:
        msg: The SRC-Nginx component must be run before this component
      when: src_nginx_config.changed

    - name: Resolve 'omit' in variables
      block:
        - name: Set uwsgi_config
          set_fact:
            uwsgi_config: "{{ _uwsgi_config }}"

        - name: Set uwsgi_proxy_config
          set_fact:
            uwsgi_proxy_config: "{{ _uwsgi_proxy_config }}"

    - name: Set auth info variable if auth basic is set
      when: flask_app_auth == 'basic'
      set_fact:
        _flask_app_auth_info:
          - name: "{{ flask_app_name }}"
            username: "{{ flask_app_username | default('') }}"
            password: "{{ flask_app_password | default('') }}"
      no_log: true

    - name: Clone repo
      tags: molecule-idempotence-notest
      git:
        repo: "{{ flask_app_repo }}"
        version: "{{ flask_app_version | default(omit, true) }}"
        dest: "{{ uwsgi_app_dir }}"
        depth: 1

    - name: Create venv with uv
      include_role:
        name: uv
      vars:
        uv_venvs:
          - path: "{{ uwsgi_venv }}"
            python: "{{ flask_app_python_version }}"
    
    - name: Ensure build requirements for uwsgi present
      when: ansible_os_family == 'Debian'
      package:
        name:
            - build-essential
            - python3-dev

    - name: Install uwsgi
      pip:
        executable: "uv_pip"
        name:
          - wheel
          - uwsgi
      environment:
        VIRTUAL_ENV: "{{ uwsgi_venv }}"
        CC: 'gcc' # https://github.com/astral-sh/uv/issues/6488
        LIBRARY_PATH: "{{ uv_python_paths[flask_app_python_version] | regex_replace('/bin/python3?', '/lib/') }}"

    - name: Install requirements
      when: flask_app_requirements | length > 0
      pip:
        executable: "uv_pip" 
        requirements: "{{ uwsgi_app_dir }}/{{ item | trim }}"
      environment:
        VIRTUAL_ENV: "{{ uwsgi_venv }}"
      with_items: "{{ flask_app_requirements.split(',') }}"
 
  roles:
    - role: nginx_uwsgi
