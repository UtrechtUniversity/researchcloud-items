---
- name: Use aptly to serve apt packages
  hosts: localhost
  gather_facts: true
  pre_tasks:
    - name: Get Service Status
      no_log: true
      ansible.builtin.systemd:
        name: nginx
      register: nginx_status

    - name: Stop if nginx is not installed
      ansible.builtin.fail:
        msg: The nginx service must be installed and active for this component to work.
      when: nginx_status.status.ActiveState != 'active'

    - name: Parse aptly packages as yaml
      ansible.builtin.set_fact:
        packages: "{{ packages | d([]) + [item | from_yaml] }}"
      loop: "{{ aptly_packages.split('\\n') | list }}"

    - name: Parse aptly repositories as yaml
      ansible.builtin.set_fact:
        repos: "{{ repos | d([]) + [item | from_yaml] }}"
      loop: "{{ aptly_repositories.split('\\n') | list }}"

    - name: Set aptly user vars
      ansible.builtin.set_fact:
        aptly_user: "{{ aptly_user | default('aptly') }}"
        aptly_home: /srv/aptly

    # When the gpg keys were set as a component parameter, '\n' needs to be replaced by true newlines
    - name: Set gpg key variables
      when: (aptly_gpg_private_key | default('') | length > 0) and (aptly_gpg_public_key | default('') | length > 0)
      ansible.builtin.set_fact:
        gpg_private_key: "{{ aptly_gpg_private_key.split('\\n') | join('\n') }}"
        gpg_public_key: "{{ aptly_gpg_public_key.split('\\n') | join('\n') }}"

    # Create new gpg keypair when none was provided in the parameters
    - name: Create gpg keys
      when: (aptly_gpg_private_key | default('') | length == 0) or (aptly_gpg_public_key | default('') | length == 0)
      block:
        - name: Generate keys
          ansible.builtin.import_role:
            name: ext/juju4.gpgkey_generate
          vars:
            gpg_pull: false # Don't pull the created keys to the orchestrator
            gpg_generator_user: root # aptly user does not exist yet
            gpg_realname: "{{ aptly_gpg_realname | default('Aptly on Research Cloud') }}"
            gpg_useremail: "{{ aptly_gpg_useremail | default('aptly@localhost') }}"
            gpg_algo: "{{ aptly_gpg_algo | default('future-default') }}"
            gpg_expire: "{{ aptly_gpg_expire | default(360) }}"
            gpg_passphrase: "{{ aptly_gpg_passphrase | default(None) }}"
            gpg_pubkeyfileexport: aptly.asc
            gpg_privkeyfile: aptly.priv
            gpg_home: /root
            gpg_user: "{{ aptly_user }}"

        - name: Cat GPG private key
          ansible.builtin.command: cat /root/aptly.priv
          changed_when: false
          no_log: true
          register: aptly_gpg_private_cat
        - name: Cat GPG public key
          ansible.builtin.command: cat /root/aptly.asc
          changed_when: false
          no_log: true
          register: aptly_gpg_public_cat
        - name: Set GPG key vars
          ansible.builtin.set_fact:
            gpg_private_key: "{{ aptly_gpg_private_cat.stdout }}"
            gpg_public_key: "{{ aptly_gpg_public_cat.stdout }}"
          no_log: true

  roles:
    - role: ext/hetzner.aptly
      vars:
        aptly__user_home_directory: "{{ aptly_home }}"
        aptly__user: "{{ aptly_user }}"
        aptly__gpg_private_key: "{{ gpg_private_key }}"
        aptly__gpg_public_key: "{{ gpg_public_key }}"
        aptly__repositories: "{{ repos }}"
        aptly__api_enable: "{{ aptly_api_enable | default('false') | bool }}"
    - role: aptly_add
      vars:
        webserver_group: www-data
        aptly__packages: "{{ packages }}"
        aptly__user: "{{ aptly_user }}"
        aptly__homedir: "{{ aptly_home }}"

  tasks:
    - name: Copy pubkey to repo
      ansible.builtin.copy:
        content: "{{ gpg_public_key }}"
        dest: "{{ aptly_home }}/.aptly/public/aptly_pubkey.asc"
        owner: aptly
        group: www-data
        mode: "0644"

    # NB: aptly homedir is hardcoded because copy does not support templating
    - name: Create nginx location block
      ansible.builtin.copy:
        content: |
          location /apt {
            alias /srv/aptly/.aptly/public;
            autoindex on;
          }
        dest: /etc/nginx/app-location-conf.d/aptly.conf
        mode: "0644"
        force: false
      notify: Restart nginx

  handlers:
    - name: Restart nginx
      ansible.builtin.service:
        name: nginx
        state: restarted
